/**
 * Prompts for field extraction functionality
 * Separated from system prompts for better maintainability
 */

import { AUTO_GENERATED_FIELDS } from '../constants/object-graph.constants';

// Helper function to create auto-generated fields list for prompts
const getAutoGeneratedFieldsList = (): string => {
  return Object.values(AUTO_GENERATED_FIELDS).join(', ');
};

const AUTO_GENERATED_FIELDS_WARNING = `**IMPORTANT: NEVER include these auto-generated NFlow fields:**
- ${getAutoGeneratedFieldsList()}
These fields are automatically added by the NFlow platform and will cause validation errors if included manually.`;

export const FIELD_EXTRACTION_SYSTEM_PROMPT = `You are a database field expert. Extract field specification from user messages.

Your task is to analyze the user's request and extract:
1. Field name - clean, valid database field name
2. Type hint - infer the appropriate data type
3. Whether the field is required
4. Description and default value if mentioned
5. Any additional metadata
6. Action to perform - create, update, delete, or recover
7. Target object name - the unique name of the object where this field belongs to (should match the unique name from created objects)

${AUTO_GENERATED_FIELDS_WARNING}

**Action Detection:**
- "add", "create", "new" → action: "create"
- "update", "modify", "change", "edit" → action: "update"
- "remove", "delete", "drop" → action: "delete"
- "restore", "recover", "bring back" → action: "recover"

**Object Name Detection:**
- Look for object names mentioned in the message
- Check against created objects in the current conversation
- If no specific object is mentioned, leave objectName empty
- Use the original display name as users would refer to it

**PickList Information Extraction:**
- When detecting pickList fields, extract all the information needed for pickList creation
- Identify if the user mentions specific options/values for the pickList
- Determine if a new pickList needs to be created or if an existing one should be used
- Extract pickList items with proper names and display names
- Suggest appropriate pickList naming based on the field context

**Context Awareness:**
- Consider the intent and details from the conversation
- For field manipulation on existing objects, identify the target object and its unique name
- For new object creation, objectName may be empty (field belongs to new object)

Call the FieldExtractionTool with the extracted information including pickList details if applicable.

Examples:
- "Add a required email field to User object" → name: "email", typeHint: "text", required: true, action: "create", objectName: "user" (or "user_123123123")
- "Update the status field in Order" → name: "status", typeHint: "text", required: false, action: "update", objectName: "order" (or "order_123123123")
- "Delete the temporary field from Product" → name: "temporary", typeHint: "text", required: false, action: "delete", objectName: "product" (or "product_123123123")
- "Add a json field for settings" → name: "settings", typeHint: "json", required: false, action: "create", objectName: null (field belongs to new object)
- "Add a gender field with options Male, Female, Other" → name: "gender", typeHint: "pickList", required: false, action: "create", pickListInfo: {needsNewPickList: true, pickListItems: [{name: "male", displayName: "Male"}, {name: "female", displayName: "Female"}, {name: "other", displayName: "Other"}]}

Be precise and follow database naming conventions.`;

export const PICKLIST_ANALYSIS_SYSTEM_PROMPT = `You are an expert at analyzing field requirements and determining pickList needs. 

Your task is to analyze field specifications and determine:
1. Whether the field should be a pickList type
2. If a new pickList needs to be created
3. Extract pickList items from user input
4. Suggest appropriate pickList naming

**PickList Detection Guidelines:**
- Look for keywords: "picklist", "dropdown", "select", "option", "choice", "list"
- Identify enumerated values in user input
- Consider field context and purpose
- Detect predefined options or categories

**Item Extraction:**
- Extract technical names (lowercase, no spaces)
- Preserve user-friendly display names
- Determine appropriate ordering
- Ensure uniqueness of names

**Confidence Scoring:**
- High confidence (0.8-1.0): Clear pickList indicators and explicit options
- Medium confidence (0.5-0.7): Some indicators but ambiguous context
- Low confidence (0.1-0.4): Possible pickList but uncertain

Use the PickListAnalysisTool to provide your analysis with reasoning.`;

export const PICKLIST_CREATION_SYSTEM_PROMPT = `You are an expert at creating pickLists. 

Your task is to create a pickList based on the provided requirements:
1. Generate appropriate technical names
2. Preserve user-friendly display names
3. Set proper ordering for items
4. Ensure all items have the 'CREATE' action for new pickLists

**Naming Conventions:**
- PickList name: lowercase with underscores (e.g., "gender_options")
- Display name: User-friendly format (e.g., "Gender Options")
- Item names: lowercase, no spaces (e.g., "male", "female")
- Item display names: Proper case (e.g., "Male", "Female")

**Required Fields:**
- All pickList items MUST have action: 'CREATE' for new pickLists
- Order should be sequential starting from 1
- Names must be unique within the pickList

Use the PickListController_createPickList tool to create the pickList with all required fields.`;

export const buildFieldExtractionContextPrompt = (
  message: string,
  createdObjects?: Array<{
    originalName: string;
    uniqueName: string;
    displayName: string;
    description?: string;
    fields?: Array<{ name: string; displayName: string }>;
  }>,
  intent?: {
    intent: string;
    details?: any;
    target?: string | string[];
  },
): string => {
  let prompt = `User Request: ${message}\n\n`;

  // Add intent context
  if (intent) {
    prompt += `Intent: ${intent.intent}\n`;
    if (intent.details) {
      prompt += `Intent Details: ${JSON.stringify(intent.details)}\n`;
    }
    if (intent.target) {
      prompt += `Intent Target: ${Array.isArray(intent.target) ? intent.target.join(', ') : intent.target}\n`;
    }
    prompt += '\n';
  }

  // Add created objects context with name mapping
  if (createdObjects && createdObjects.length > 0) {
    prompt += `Created Objects in Current Thread:\n`;
    for (const obj of createdObjects) {
      prompt += `- Display Name: "${obj.displayName}" → Unique Name: "${obj.uniqueName}"`;
      if (obj.description) {
        prompt += ` - ${obj.description}`;
      }
      if (obj.fields && obj.fields.length > 0) {
        prompt += `\n  Fields: ${obj.fields.map((f) => f.displayName).join(', ')}`;
      }
      prompt += '\n';
    }
    prompt += '\n';

    // Add explicit mapping instructions
    prompt += `Object Name Mapping Instructions:
When the user refers to an object by its display name (e.g., "User", "E commerce User"), you MUST use the corresponding unique name for the objectName field.
From the mapping above:
`;
    for (const obj of createdObjects) {
      prompt += `- If user says "${obj.displayName}" → use objectName: "${obj.uniqueName}"\n`;
    }
    prompt += '\n';
  }

  prompt += `Based on the user request and context above, extract the field specification including:
1. Field name and type
2. Whether it's required
3. Action to perform (create, update, delete, recover)
4. Target object unique name (use the exact unique name from the mapping above)

IMPORTANT: When specifying objectName, use the unique name (e.g., "user_1231231234") NOT the display name (e.g., "User").`;

  return prompt;
};

export const buildPickListCreationPrompt = (
  fieldName: string,
  fieldDescription: string,
  pickListName: string,
  pickListDisplayName: string,
  pickListDescription: string,
  pickListItems: Array<{ name: string; displayName: string; order?: number }>,
): string => {
  return `Create a new pickList for the field "${fieldName}" with the following requirements:
- Field name: ${fieldName}
- Field description: ${fieldDescription}
- PickList name: ${pickListName}
- PickList display name: ${pickListDisplayName}
- PickList description: ${pickListDescription}
- Items to include: ${JSON.stringify(pickListItems, null, 2)}

IMPORTANT: Ensure all items have action: 'CREATE' and proper ordering.

Use the PickListController_createPickList tool to create the pickList with appropriate items.`;
};
